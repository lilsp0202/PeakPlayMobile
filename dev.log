
> peakplay@1.0.0 dev
> next dev

   ‚ñ≤ Next.js 15.3.2
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.75:3000
   - Environments: .env
   - Experiments (use with caution):
     ¬∑ clientTraceMetadata

 ‚úì Starting...
> [PWA] Compile server
> [PWA] Compile server
> [PWA] Compile client (static)
> [PWA] Auto register service worker with: /Users/lilsp/peakplay-prototype/node_modules/next-pwa/register.js
> [PWA] Service worker: /Users/lilsp/peakplay-prototype/public/sw.js
> [PWA]   url: /sw.js
> [PWA]   scope: /
> [PWA] Build in develop mode, cache and precache are mostly disabled. This means offline support is disabled, but you can continue developing other functions in service worker.
 ‚úì Ready in 2.1s
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚óã Compiling / ...
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 5509ms
 GET / 200 in 35ms
 GET / 200 in 55ms
 GET / 200 in 29ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 1419ms
 GET /auth/signin 200 in 1412ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 74ms
 GET /api/auth/providers 200 in 21ms
 GET /api/auth/csrf 200 in 8ms
üîç Authorize called with credentials: { email: 'coach@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8bcrs0000w2uwtrnw264x',
  email: 'coach@gmail.com',
  role: 'COACH'
}
üîê Password valid: false
[AUTH_EVENT] LOGIN_FAILED - coach@gmail.com - Invalid password
‚ùå Authentication error: Error: Invalid email or password
    at Object.authorize (src/lib/auth.ts:48:18)
  46 |             // Log failed login attempt
  47 |             await logAuthEvent('LOGIN_FAILED', user.email, 'Invalid password');
> 48 |             throw new Error("Invalid email or password");
     |                  ^
  49 |           }
  50 |
  51 |           console.log('‚úÖ Authentication successful for:', user.email);
 POST /api/auth/callback/credentials 401 in 223ms
 GET /api/auth/providers 200 in 17ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 321ms
 GET /api/auth/session 200 in 5ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /dashboard 200 in 4667ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/providers 200 in 82ms
 GET /api/auth/csrf 200 in 7ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 339ms
 GET /api/auth/session 200 in 6ms
 GET /dashboard 200 in 8ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 3452ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/coach/profile 200 in 3574ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 1477ms
 GET /api/skills 200 in 1352ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 1542ms
 GET /api/badges?manage=true 200 in 1415ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /api/students/by-academy?academy=Not%20specified 200 in 1571ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 105ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/coach/profile 200 in 1588ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/coach/profile 200 in 137ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /_next/static/webpack/450aafc18084a0c1.webpack.hot-update.json 404 in 851ms
 ‚ö† Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 GET /dashboard 200 in 85ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 34ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 24ms
 GET /api/skills 200 in 11ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 33ms
 GET /api/coach/profile 200 in 34ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 88ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 65ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 56ms
Skills API - Received request body: {
  "pushupScore": 10
}
Skills API - Session user: {
  name: 'Coach 1',
  email: 'coach1@gmail.com',
  image: undefined,
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  role: 'COACH'
}
Skills API - Student ID from request: undefined
Skills API - Coach request missing studentId
 POST /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 400 in 21ms
 GET /api/auth/csrf 200 in 15ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/signout 200 in 1009ms
 GET /auth/signin 200 in 105ms
 GET /api/auth/session 200 in 11ms
 GET /api/auth/providers 200 in 16ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'hello@gmail.con', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
üë§ User found: None
[AUTH_EVENT] LOGIN_FAILED - hello@gmail.con - Invalid credentials
‚ùå Authentication error: Error: Invalid email or password
    at Object.authorize (src/lib/auth.ts:39:18)
  37 |             // Log failed login attempt
  38 |             await logAuthEvent('LOGIN_FAILED', credentials.email, 'Invalid credentials');
> 39 |             throw new Error("Invalid email or password");
     |                  ^
  40 |           }
  41 |
  42 |           const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
 POST /api/auth/callback/credentials 401 in 69ms
 GET /api/auth/providers 200 in 13ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'abc@gmail.con', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
üë§ User found: None
[AUTH_EVENT] LOGIN_FAILED - abc@gmail.con - Invalid credentials
‚ùå Authentication error: Error: Invalid email or password
    at Object.authorize (src/lib/auth.ts:39:18)
  37 |             // Log failed login attempt
  38 |             await logAuthEvent('LOGIN_FAILED', credentials.email, 'Invalid credentials');
> 39 |             throw new Error("Invalid email or password");
     |                  ^
  40 |           }
  41 |
  42 |           const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
 POST /api/auth/callback/credentials 401 in 43ms
 GET /auth/signin 200 in 69ms
 GET /api/auth/session 200 in 11ms
 GET /api/auth/providers 200 in 22ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'abc@gmail.com', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8kswi0003w2uwhm4d405n',
  email: 'abc@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: abc@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - abc@gmail.com 
 POST /api/auth/callback/credentials 200 in 342ms
 GET /api/auth/session 200 in 6ms
 GET /dashboard 200 in 17ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 919ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 927ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 25ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 23ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1433ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1490ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/hooper-index 200 in 1623ms
 GET /api/hooper-index 200 in 1702ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr8kswi0003w2uwhm4d405n 200 in 1185ms
 GET /api/matches/stats?userId=cmcr8kswi0003w2uwhm4d405n 200 in 1186ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr8kswi0003w2uwhm4d405n 200 in 32ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/matches 200 in 1365ms
 GET /api/matches 200 in 1365ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 1365ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 1374ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /badge-centre 200 in 2219ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 911ms
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 922ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 38ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 45ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 51ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 141ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 217ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 842ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Feedback"."id", "public"."Feedback"."studentId", "public"."Feedback"."coachId", "public"."Feedback"."title", "public"."Feedback"."content", "public"."Feedback"."category", "public"."Feedback"."priority", "public"."Feedback"."isRead", "public"."Feedback"."createdAt", "public"."Feedback"."updatedAt" FROM "public"."Feedback" WHERE "public"."Feedback"."studentId" = $1 ORDER BY "public"."Feedback"."createdAt" DESC OFFSET $2
 GET /api/feedback 200 in 851ms
prisma:query SELECT "public"."Feedback"."id", "public"."Feedback"."studentId", "public"."Feedback"."coachId", "public"."Feedback"."title", "public"."Feedback"."content", "public"."Feedback"."category", "public"."Feedback"."priority", "public"."Feedback"."isRead", "public"."Feedback"."createdAt", "public"."Feedback"."updatedAt" FROM "public"."Feedback" WHERE "public"."Feedback"."studentId" = $1 ORDER BY "public"."Feedback"."createdAt" DESC OFFSET $2
 GET /api/feedback 200 in 853ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."SessionTodo"."id", "public"."SessionTodo"."coachId", "public"."SessionTodo"."title", "public"."SessionTodo"."sessionDate", "public"."SessionTodo"."createdAt", "public"."SessionTodo"."updatedAt" FROM "public"."SessionTodo" WHERE EXISTS(SELECT "t0"."todoId" FROM "public"."SessionTodoStudent" AS "t0" WHERE ("t0"."studentId" = $1 AND ("public"."SessionTodo"."id") = ("t0"."todoId") AND "t0"."todoId" IS NOT NULL)) ORDER BY "public"."SessionTodo"."sessionDate" DESC OFFSET $2
 GET /api/session-todo?studentId=cmcr8kswx0005w2uwr7ao97me 200 in 819ms
 GET /api/hooper-index 200 in 144ms
 GET /api/hooper-index 200 in 233ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 40ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 50ms
Skills API - Received request body: {
  "pushupScore": 10
}
Skills API - Session user: {
  name: 'Abc',
  email: 'abc@gmail.com',
  image: undefined,
  id: 'cmcr8kswi0003w2uwhm4d405n',
  role: 'ATHLETE'
}
Skills API - Student ID from request: undefined
Skills API - Athlete updating own data
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
Skills API - Update data prepared: {
  "pushupScore": 10
}
Skills API - Target student ID: cmcr8kswx0005w2uwr7ao97me
prisma:query BEGIN
prisma:query SELECT "public"."Skills"."id" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) OFFSET $2
prisma:query INSERT INTO "public"."Skills" ("id","userId","studentId","studentName","studentEmail","age","pushupScore","category","lastUpdated","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Skills"."id"
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
Skills API - Skills updated successfully: {
  "id": "cmcrby96v0001w2r6ux7d2pty",
  "userId": "cmcr8kswi0003w2uwhm4d405n",
  "studentId": "cmcr8kswx0005w2uwr7ao97me",
  "studentName": "Abc",
  "studentEmail": "abc@gmail.com",
  "age": 18,
  "pushupScore": 10,
  "pullupScore": null,
  "verticalJump": null,
  "gripStrength": null,
  "sprintTime": null,
  "sprint50m": null,
  "shuttleRun": null,
  "run5kTime": null,
  "yoyoTest": null,
  "category": "PHYSICAL",
  "lastUpdated": "2025-07-06T07:07:38.887Z",
  "createdAt": "2025-07-06T07:07:38.887Z",
  "updatedAt": "2025-07-06T07:07:38.887Z",
  "carbohydrates": null,
  "fats": null,
  "waterIntake": null,
  "moodScore": null,
  "protein": null,
  "sleepScore": null,
  "totalCalories": null,
  "aim": null,
  "backFootDrag": null,
  "backFootLanding": null,
  "backLift": null,
  "battingBalance": null,
  "battingGrip": null,
  "battingStance": null,
  "bowlingGrip": null,
  "calling": null,
  "cockingOfWrist": null,
  "flatCatch": null,
  "followThrough": null,
  "frontFootLanding": null,
  "highCatch": null,
  "highElbow": null,
  "hipDrive": null,
  "nonBowlingArm": null,
  "pickUp": null,
  "positioningOfBall": null,
  "receiving": null,
  "release": null,
  "runUp": null,
  "runningBetweenWickets": null,
  "softHands": null,
  "throw": null,
  "topHandDominance": null,
  "student": {
    "studentName": "Abc",
    "age": 18,
    "academy": "Not specified",
    "height": 0,
    "weight": 0
  }
}
Skills API - Triggering badge evaluation for student: cmcr8kswx0005w2uwr7ao97me
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query COMMIT
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 0
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 10,
  numericValue: 10,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  passed: true,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 1,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 1,
  progress: 100,
  earned: true
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: true, progress: 100, score: 1 }
BadgeEngine - Awarding badge: First Steps
prisma:query INSERT INTO "public"."StudentBadge" ("id","studentId","badgeId","awardedAt","score","progress","isRevoked","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt"
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 10,
  numericValue: 10,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  passed: true,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 1,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 1,
  progress: 100,
  earned: true
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: true, progress: 100, score: 1 }
BadgeEngine - Awarding badge: Push It
prisma:query INSERT INTO "public"."StudentBadge" ("id","studentId","badgeId","awardedAt","score","progress","isRevoked","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt"
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 10,
  numericValue: 10,
  operator: 'GTE',
  targetValue: '25',
  numericTarget: 25
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 25,
  numericValue: 25,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 2, totalProgress: 50 }
Skills API - New badges awarded: [ 'cmcr7fq8v0006w26myuo9ayx4', 'cmcr7fqa1000aw26m1m8v3kfm' ]
 POST /api/skills 200 in 588ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 40ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 856ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1891ms
 GET / 200 in 27ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 762ms
 GET /auth/signin 200 in 874ms
 GET /api/auth/session 200 in 4ms
 GET /api/auth/providers 200 in 14ms
 GET /api/auth/csrf 200 in 6ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 451ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 24ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 880ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 966ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 933ms
 GET /api/skills 200 in 897ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 937ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 27ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 996ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 116ms
 GET /api/coach/profile 200 in 1058ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 1051ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr8kswx0005w2uwr7ao97me 200 in 74ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr8kswx0005w2uwr7ao97me 200 in 67ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 759ms
Skills API - Received request body: {
  "pushupScore": 10,
  "verticalJump": 38,
  "studentId": "cmcr8kswx0005w2uwr7ao97me"
}
Skills API - Session user: {
  name: 'Coach 1',
  email: 'coach1@gmail.com',
  image: undefined,
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  role: 'COACH'
}
Skills API - Student ID from request: cmcr8kswx0005w2uwr7ao97me
Skills API - Coach updating student data
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
Skills API - Target student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  userId: 'cmcr8kswi0003w2uwhm4d405n',
  studentName: 'Abc',
  username: 'abc',
  email: 'abc@gmail.com',
  age: 18,
  height: 0,
  weight: 0,
  academy: 'Not specified',
  sport: 'CRICKET',
  role: 'All-rounder',
  coachId: 'cmcr8o6gk0008w2uwnbbl6ph1',
  createdAt: 2025-07-06T05:33:12.417Z,
  updatedAt: 2025-07-06T05:36:40.788Z,
  coach: {
    id: 'cmcr8o6gk0008w2uwnbbl6ph1',
    userId: 'cmcr8o6gc0006w2uwdw162bcv',
    name: 'Coach 1',
    username: 'coach1',
    email: 'coach1@gmail.com',
    academy: 'Not specified',
    createdAt: 2025-07-06T05:35:49.941Z,
    updatedAt: 2025-07-06T05:35:49.941Z
  }
}
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
Skills API - Coach found: {
  id: 'cmcr8o6gk0008w2uwnbbl6ph1',
  userId: 'cmcr8o6gc0006w2uwdw162bcv',
  name: 'Coach 1',
  username: 'coach1',
  email: 'coach1@gmail.com',
  academy: 'Not specified',
  createdAt: 2025-07-06T05:35:49.941Z,
  updatedAt: 2025-07-06T05:35:49.941Z
}
Skills API - Coach authorization successful
Skills API - Update data prepared: {
  "pushupScore": 10,
  "verticalJump": 38
}
Skills API - Target student ID: cmcr8kswx0005w2uwr7ao97me
prisma:query BEGIN
prisma:query SELECT "public"."Skills"."id" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) OFFSET $2
prisma:query UPDATE "public"."Skills" SET "pushupScore" = $1, "verticalJump" = $2, "updatedAt" = $3 WHERE ("public"."Skills"."id" = $4 AND ("public"."Skills"."studentId" = $5 AND 1=1)) RETURNING "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance"
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Skills API - Skills updated successfully: {
  "id": "cmcrby96v0001w2r6ux7d2pty",
  "userId": "cmcr8kswi0003w2uwhm4d405n",
  "studentId": "cmcr8kswx0005w2uwr7ao97me",
  "studentName": "Abc",
  "studentEmail": "abc@gmail.com",
  "age": 18,
  "pushupScore": 10,
  "pullupScore": null,
  "verticalJump": 38,
  "gripStrength": null,
  "sprintTime": null,
  "sprint50m": null,
  "shuttleRun": null,
  "run5kTime": null,
  "yoyoTest": null,
  "category": "PHYSICAL",
  "lastUpdated": "2025-07-06T07:07:38.887Z",
  "createdAt": "2025-07-06T07:07:38.887Z",
  "updatedAt": "2025-07-06T07:21:08.027Z",
  "carbohydrates": null,
  "fats": null,
  "waterIntake": null,
  "moodScore": null,
  "protein": null,
  "sleepScore": null,
  "totalCalories": null,
  "aim": null,
  "backFootDrag": null,
  "backFootLanding": null,
  "backLift": null,
  "battingBalance": null,
  "battingGrip": null,
  "battingStance": null,
  "bowlingGrip": null,
  "calling": null,
  "cockingOfWrist": null,
  "flatCatch": null,
  "followThrough": null,
  "frontFootLanding": null,
  "highCatch": null,
  "highElbow": null,
  "hipDrive": null,
  "nonBowlingArm": null,
  "pickUp": null,
  "positioningOfBall": null,
  "receiving": null,
  "release": null,
  "runUp": null,
  "runningBetweenWickets": null,
  "softHands": null,
  "throw": null,
  "topHandDominance": null,
  "student": {
    "studentName": "Abc",
    "age": 18,
    "academy": "Not specified",
    "height": 0,
    "weight": 0
  }
}
Skills API - Triggering badge evaluation for student: cmcr8kswx0005w2uwr7ao97me
BadgeEngine - Starting evaluation for student: cmcr8kswx0005w2uwr7ao97me
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2) OFFSET $3
BadgeEngine - Student found: {
  id: 'cmcr8kswx0005w2uwr7ao97me',
  name: 'Abc',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 2
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 10,
  numericValue: 10,
  operator: 'GTE',
  targetValue: '25',
  numericTarget: 25
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 38,
  numericValue: 38,
  operator: 'GTE',
  targetValue: '40',
  numericTarget: 40
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  passed: false,
  operator: 'GTE',
  targetValue: '40'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 25,
  numericValue: 25,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 48 }
 POST /api/skills?studentId=cmcr8kswx0005w2uwr7ao97me 200 in 691ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr8kswx0005w2uwr7ao97me 200 in 38ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 16ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."SkillHistory"."id", "public"."SkillHistory"."studentId", "public"."SkillHistory"."date", "public"."SkillHistory"."physicalScore", "public"."SkillHistory"."nutritionScore", "public"."SkillHistory"."mentalScore", "public"."SkillHistory"."wellnessScore", "public"."SkillHistory"."techniqueScore", "public"."SkillHistory"."tacticalScore", "public"."SkillHistory"."isMatchDay", "public"."SkillHistory"."matchId", "public"."SkillHistory"."coachFeedback", "public"."SkillHistory"."notes", "public"."SkillHistory"."createdAt", "public"."SkillHistory"."updatedAt" FROM "public"."SkillHistory" WHERE ("public"."SkillHistory"."studentId" = $1 AND "public"."SkillHistory"."date" >= $2 AND "public"."SkillHistory"."date" <= $3) ORDER BY "public"."SkillHistory"."date" ASC OFFSET $4
 GET /api/skills/history?studentId=cmcr7avu00002w2kb09d6emwc&days=30 200 in 1565ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."SkillHistory"."id", "public"."SkillHistory"."studentId", "public"."SkillHistory"."date", "public"."SkillHistory"."physicalScore", "public"."SkillHistory"."nutritionScore", "public"."SkillHistory"."mentalScore", "public"."SkillHistory"."wellnessScore", "public"."SkillHistory"."techniqueScore", "public"."SkillHistory"."tacticalScore", "public"."SkillHistory"."isMatchDay", "public"."SkillHistory"."matchId", "public"."SkillHistory"."coachFeedback", "public"."SkillHistory"."notes", "public"."SkillHistory"."createdAt", "public"."SkillHistory"."updatedAt" FROM "public"."SkillHistory" WHERE ("public"."SkillHistory"."studentId" = $1 AND "public"."SkillHistory"."date" >= $2 AND "public"."SkillHistory"."date" <= $3) ORDER BY "public"."SkillHistory"."date" ASC OFFSET $4
 GET /api/skills/history?studentId=cmcr8kswx0005w2uwr7ao97me&days=30 200 in 42ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1092ms
 GET / 200 in 26ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1454ms
 GET / 200 in 32ms
 GET /dashboard 200 in 150ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 1073ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /auth/signin 200 in 770ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1459ms
 GET /api/auth/session 200 in 17ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 761ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 777ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 781ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 878ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 924ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 31ms
 GET /api/skills 200 in 24ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 24ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 45ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 65ms
 GET /api/auth/providers 200 in 16ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 352ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 38ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 32ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 30ms
 GET /api/skills 200 in 19ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 29ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 32ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
 GET /api/skills 200 in 9ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 74ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 29ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 17ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 89ms
 GET /badge-centre 200 in 31ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 47ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 41ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 57ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 60ms
 GET /api/skills 200 in 12ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT 1
 GET /api/skills 200 in 4ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 25ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
 GET /api/students/by-academy?academy=Not%20specified 200 in 28ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 59ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 16ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 26ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 49ms
 GET /api/auth/session 200 in 62ms
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 38ms
 GET /api/skills 200 in 6ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 27ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 33ms
 GET /api/badges?manage=true 200 in 41ms
 GET /dashboard 200 in 177ms
 GET /api/auth/session 200 in 5ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 23ms
 GET /api/skills 200 in 5ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 19ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 28ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 47ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 68ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 72ms
 GET /api/auth/csrf 200 in 20ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/signout 200 in 1416ms
 GET /auth/signin 200 in 113ms
 GET /api/auth/session 200 in 14ms
 GET /api/auth/providers 200 in 19ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'hello@gmail.com', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr7avti0000w2kbdc4ocath',
  email: 'hello@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: hello@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - hello@gmail.com 
 POST /api/auth/callback/credentials 200 in 328ms
 GET /api/auth/session 200 in 5ms
 GET /dashboard 200 in 16ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 519ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 540ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 27ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 849ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1192ms
 GET /api/hooper-index 200 in 926ms
 GET /api/auth/session 200 in 79ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 178ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 46ms
 GET /api/hooper-index 200 in 114ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
 GET /api/hooper-index 200 in 141ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 909ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 113ms
 GET /api/skills 200 in 130ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 86ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 84ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 164ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 179ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 53ms
 GET /api/skills 200 in 38ms
 GET /api/auth/session 200 in 108ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 39ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 25ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/hooper-index 200 in 129ms
 GET /api/hooper-index 200 in 150ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 726ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 42ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 35ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 121ms
 GET /api/skills 200 in 126ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr7avti0000w2kbdc4ocath 200 in 1782ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr7avti0000w2kbdc4ocath 200 in 1705ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr7avti0000w2kbdc4ocath 200 in 38ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr7avti0000w2kbdc4ocath 200 in 37ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 1048ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 1090ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC OFFSET $2
 GET /api/matches/stats?userId=cmcr7avti0000w2kbdc4ocath 200 in 893ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/matches 200 in 1343ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/matches 200 in 1325ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 47ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/matches 200 in 53ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."createdAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students 200 in 56ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/matches 200 in 55ms
 GET /badge-centre 200 in 136ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1397ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1364ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 984ms
 GET /api/student/profile 200 in 982ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
 GET /api/skills 200 in 1248ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: false,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1368ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
 GET /api/hooper-index 200 in 1462ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - No skills data for SKILLS_METRIC rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1953ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Feedback"."id", "public"."Feedback"."studentId", "public"."Feedback"."coachId", "public"."Feedback"."title", "public"."Feedback"."content", "public"."Feedback"."category", "public"."Feedback"."priority", "public"."Feedback"."isRead", "public"."Feedback"."createdAt", "public"."Feedback"."updatedAt" FROM "public"."Feedback" WHERE "public"."Feedback"."studentId" = $1 ORDER BY "public"."Feedback"."createdAt" DESC OFFSET $2
 GET /api/feedback 200 in 1035ms
prisma:query SELECT "public"."Feedback"."id", "public"."Feedback"."studentId", "public"."Feedback"."coachId", "public"."Feedback"."title", "public"."Feedback"."content", "public"."Feedback"."category", "public"."Feedback"."priority", "public"."Feedback"."isRead", "public"."Feedback"."createdAt", "public"."Feedback"."updatedAt" FROM "public"."Feedback" WHERE "public"."Feedback"."studentId" = $1 ORDER BY "public"."Feedback"."createdAt" DESC OFFSET $2
 GET /api/feedback 200 in 1041ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."SessionTodo"."id", "public"."SessionTodo"."coachId", "public"."SessionTodo"."title", "public"."SessionTodo"."sessionDate", "public"."SessionTodo"."createdAt", "public"."SessionTodo"."updatedAt" FROM "public"."SessionTodo" WHERE EXISTS(SELECT "t0"."todoId" FROM "public"."SessionTodoStudent" AS "t0" WHERE ("t0"."studentId" = $1 AND ("public"."SessionTodo"."id") = ("t0"."todoId") AND "t0"."todoId" IS NOT NULL)) ORDER BY "public"."SessionTodo"."sessionDate" DESC OFFSET $2
 GET /api/session-todo?studentId=cmcr7avu00002w2kb09d6emwc 200 in 477ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/csrf 200 in 1106ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/signout 200 in 477ms
 GET /auth/signin 200 in 123ms
 GET /api/auth/session 200 in 17ms
 GET /api/auth/providers 200 in 33ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'coach@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8bcrs0000w2uwtrnw264x',
  email: 'coach@gmail.com',
  role: 'COACH'
}
üîê Password valid: false
[AUTH_EVENT] LOGIN_FAILED - coach@gmail.com - Invalid password
‚ùå Authentication error: Error: Invalid email or password
    at Object.authorize (src/lib/auth.ts:48:18)
  46 |             // Log failed login attempt
  47 |             await logAuthEvent('LOGIN_FAILED', user.email, 'Invalid password');
> 48 |             throw new Error("Invalid email or password");
     |                  ^
  49 |           }
  50 |
  51 |           console.log('‚úÖ Authentication successful for:', user.email);
 POST /api/auth/callback/credentials 401 in 283ms
 GET /api/auth/providers 200 in 20ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 319ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 23ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1284ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1375ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 727ms
 GET /api/skills 200 in 698ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 735ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 22ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 789ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 847ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 102ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 851ms
 GET /api/auth/session 200 in 37ms
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 40ms
 GET /api/skills 200 in 7ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 39ms
 GET /api/badges?manage=true 200 in 47ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 49ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."SkillHistory"."id", "public"."SkillHistory"."studentId", "public"."SkillHistory"."date", "public"."SkillHistory"."physicalScore", "public"."SkillHistory"."nutritionScore", "public"."SkillHistory"."mentalScore", "public"."SkillHistory"."wellnessScore", "public"."SkillHistory"."techniqueScore", "public"."SkillHistory"."tacticalScore", "public"."SkillHistory"."isMatchDay", "public"."SkillHistory"."matchId", "public"."SkillHistory"."coachFeedback", "public"."SkillHistory"."notes", "public"."SkillHistory"."createdAt", "public"."SkillHistory"."updatedAt" FROM "public"."SkillHistory" WHERE ("public"."SkillHistory"."studentId" = $1 AND "public"."SkillHistory"."date" >= $2 AND "public"."SkillHistory"."date" <= $3) ORDER BY "public"."SkillHistory"."date" ASC OFFSET $4
 GET /api/skills/history?studentId=cmcr7avu00002w2kb09d6emwc&days=30 200 in 1653ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."SmartNotification"."id", "public"."SmartNotification"."coachId", "public"."SmartNotification"."studentId", "public"."SmartNotification"."type", "public"."SmartNotification"."category", "public"."SmartNotification"."title", "public"."SmartNotification"."message", "public"."SmartNotification"."severity", "public"."SmartNotification"."data", "public"."SmartNotification"."isRead", "public"."SmartNotification"."isArchived", "public"."SmartNotification"."createdAt", "public"."SmartNotification"."updatedAt" FROM "public"."SmartNotification" WHERE "public"."SmartNotification"."coachId" = $1 ORDER BY "public"."SmartNotification"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."SmartNotification"."id" FROM "public"."SmartNotification" WHERE "public"."SmartNotification"."coachId" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."SmartNotification"."id" FROM "public"."SmartNotification" WHERE ("public"."SmartNotification"."coachId" = $1 AND "public"."SmartNotification"."isRead" = $2) OFFSET $3) AS "sub"
 GET /api/notifications 200 in 1905ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."SmartNotification"."id", "public"."SmartNotification"."coachId", "public"."SmartNotification"."studentId", "public"."SmartNotification"."type", "public"."SmartNotification"."category", "public"."SmartNotification"."title", "public"."SmartNotification"."message", "public"."SmartNotification"."severity", "public"."SmartNotification"."data", "public"."SmartNotification"."isRead", "public"."SmartNotification"."isArchived", "public"."SmartNotification"."createdAt", "public"."SmartNotification"."updatedAt" FROM "public"."SmartNotification" WHERE "public"."SmartNotification"."coachId" = $1 ORDER BY "public"."SmartNotification"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."NotificationPreference"."id", "public"."NotificationPreference"."coachId", "public"."NotificationPreference"."negativeTrends", "public"."NotificationPreference"."positiveMilestones", "public"."NotificationPreference"."missedCheckIns", "public"."NotificationPreference"."overdueFeedback", "public"."NotificationPreference"."trendDays", "public"."NotificationPreference"."feedbackDays", "public"."NotificationPreference"."inApp", "public"."NotificationPreference"."email", "public"."NotificationPreference"."pushNotification", "public"."NotificationPreference"."createdAt", "public"."NotificationPreference"."updatedAt" FROM "public"."NotificationPreference" WHERE ("public"."NotificationPreference"."coachId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."NotificationPreference"."id", "public"."NotificationPreference"."coachId", "public"."NotificationPreference"."negativeTrends", "public"."NotificationPreference"."positiveMilestones", "public"."NotificationPreference"."missedCheckIns", "public"."NotificationPreference"."overdueFeedback", "public"."NotificationPreference"."trendDays", "public"."NotificationPreference"."feedbackDays", "public"."NotificationPreference"."inApp", "public"."NotificationPreference"."email", "public"."NotificationPreference"."pushNotification", "public"."NotificationPreference"."createdAt", "public"."NotificationPreference"."updatedAt" FROM "public"."NotificationPreference" WHERE ("public"."NotificationPreference"."coachId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."SmartNotification"."id" FROM "public"."SmartNotification" WHERE "public"."SmartNotification"."coachId" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."SmartNotification"."id" FROM "public"."SmartNotification" WHERE ("public"."SmartNotification"."coachId" = $1 AND "public"."SmartNotification"."isRead" = $2) OFFSET $3) AS "sub"
 GET /api/notifications 200 in 1986ms
prisma:query INSERT INTO "public"."NotificationPreference" ("id","coachId","negativeTrends","positiveMilestones","missedCheckIns","overdueFeedback","trendDays","feedbackDays","inApp","email","pushNotification","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."NotificationPreference"."id", "public"."NotificationPreference"."coachId", "public"."NotificationPreference"."negativeTrends", "public"."NotificationPreference"."positiveMilestones", "public"."NotificationPreference"."missedCheckIns", "public"."NotificationPreference"."overdueFeedback", "public"."NotificationPreference"."trendDays", "public"."NotificationPreference"."feedbackDays", "public"."NotificationPreference"."inApp", "public"."NotificationPreference"."email", "public"."NotificationPreference"."pushNotification", "public"."NotificationPreference"."createdAt", "public"."NotificationPreference"."updatedAt"
 GET /api/notifications/preferences 200 in 1983ms
prisma:query INSERT INTO "public"."NotificationPreference" ("id","coachId","negativeTrends","positiveMilestones","missedCheckIns","overdueFeedback","trendDays","feedbackDays","inApp","email","pushNotification","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."NotificationPreference"."id", "public"."NotificationPreference"."coachId", "public"."NotificationPreference"."negativeTrends", "public"."NotificationPreference"."positiveMilestones", "public"."NotificationPreference"."missedCheckIns", "public"."NotificationPreference"."overdueFeedback", "public"."NotificationPreference"."trendDays", "public"."NotificationPreference"."feedbackDays", "public"."NotificationPreference"."inApp", "public"."NotificationPreference"."email", "public"."NotificationPreference"."pushNotification", "public"."NotificationPreference"."createdAt", "public"."NotificationPreference"."updatedAt"
prisma:error 
Invalid `prisma.notificationPreference.create()` invocation:


Unique constraint failed on the fields: (`coachId`)
Error fetching notification preferences: Error [PrismaClientKnownRequestError]: 
Invalid `prisma.notificationPreference.create()` invocation:


Unique constraint failed on the fields: (`coachId`)
    at async GET$1 (webpack-internal:/(rsc)/src/app/api/notifications/preferences/src/app/api/notifications/preferences/route.ts:29:20)
  27 |     if (!preferences) {
  28 |       // Create default preferences
> 29 |       preferences = await prisma.notificationPreference.create({
     |                    ^
  30 |         data: {
  31 |           coachId: coach.id,
  32 |           negativeTrends: true, {
  code: 'P2002',
  meta: [Object],
  clientVersion: '6.10.1'
}
 GET /api/notifications/preferences 500 in 2031ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."SkillHistory"."id", "public"."SkillHistory"."studentId", "public"."SkillHistory"."date", "public"."SkillHistory"."physicalScore", "public"."SkillHistory"."nutritionScore", "public"."SkillHistory"."mentalScore", "public"."SkillHistory"."wellnessScore", "public"."SkillHistory"."techniqueScore", "public"."SkillHistory"."tacticalScore", "public"."SkillHistory"."isMatchDay", "public"."SkillHistory"."matchId", "public"."SkillHistory"."coachFeedback", "public"."SkillHistory"."notes", "public"."SkillHistory"."createdAt", "public"."SkillHistory"."updatedAt" FROM "public"."SkillHistory" WHERE ("public"."SkillHistory"."studentId" = $1 AND "public"."SkillHistory"."date" >= $2 AND "public"."SkillHistory"."date" <= $3) ORDER BY "public"."SkillHistory"."date" ASC OFFSET $4
 GET /api/skills/history?studentId=cmcr7avu00002w2kb09d6emwc&days=30 200 in 96ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 461ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 754ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 1118ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 1129ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1137ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 1168ms
 GET /badge-centre 200 in 76ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 57ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 74ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 83ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 80ms
 GET /api/skills 200 in 37ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 46ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 48ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 80ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."SessionTodo"."id", "public"."SessionTodo"."coachId", "public"."SessionTodo"."title", "public"."SessionTodo"."sessionDate", "public"."SessionTodo"."createdAt", "public"."SessionTodo"."updatedAt" FROM "public"."SessionTodo" WHERE "public"."SessionTodo"."coachId" = $1 ORDER BY "public"."SessionTodo"."sessionDate" DESC OFFSET $2
 GET /api/session-todo 200 in 1115ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 60ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 60ms
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 157ms
 GET /auth/signin 200 in 275ms
 GET /api/auth/session 200 in 7ms
 GET /api/auth/providers 200 in 15ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'coach1@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  email: 'coach1@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach1@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach1@gmail.com 
 POST /api/auth/callback/credentials 200 in 478ms
 GET /api/auth/session 200 in 6ms
 GET /dashboard 200 in 24ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 499ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 599ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 768ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students/by-academy?academy=Not%20specified 200 in 765ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 828ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 855ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 70ms
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 78ms
Skills API - Received request body: {
  "battingGrip": 5,
  "studentId": "cmcr7avu00002w2kb09d6emwc"
}
Skills API - Session user: {
  name: 'Coach 1',
  email: 'coach1@gmail.com',
  image: undefined,
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  role: 'COACH'
}
Skills API - Student ID from request: cmcr7avu00002w2kb09d6emwc
Skills API - Coach updating student data
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
Skills API - Target student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  userId: 'cmcr7avti0000w2kbdc4ocath',
  studentName: 'Hello',
  username: 'hello',
  email: 'hello@gmail.com',
  age: 18,
  height: 0,
  weight: 0,
  academy: 'Not specified',
  sport: 'CRICKET',
  role: 'All-rounder',
  coachId: 'cmcr8o6gk0008w2uwnbbl6ph1',
  createdAt: 2025-07-06T04:57:30.024Z,
  updatedAt: 2025-07-06T05:36:16.532Z,
  coach: {
    id: 'cmcr8o6gk0008w2uwnbbl6ph1',
    userId: 'cmcr8o6gc0006w2uwdw162bcv',
    name: 'Coach 1',
    username: 'coach1',
    email: 'coach1@gmail.com',
    academy: 'Not specified',
    createdAt: 2025-07-06T05:35:49.941Z,
    updatedAt: 2025-07-06T05:35:49.941Z
  }
}
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
Skills API - Coach found: {
  id: 'cmcr8o6gk0008w2uwnbbl6ph1',
  userId: 'cmcr8o6gc0006w2uwdw162bcv',
  name: 'Coach 1',
  username: 'coach1',
  email: 'coach1@gmail.com',
  academy: 'Not specified',
  createdAt: 2025-07-06T05:35:49.941Z,
  updatedAt: 2025-07-06T05:35:49.941Z
}
Skills API - Coach authorization successful
Skills API - Update data prepared: {
  "battingGrip": 5
}
Skills API - Target student ID: cmcr7avu00002w2kb09d6emwc
prisma:query BEGIN
prisma:query SELECT "public"."Skills"."id" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) OFFSET $2
prisma:query INSERT INTO "public"."Skills" ("id","userId","studentId","studentName","studentEmail","age","category","lastUpdated","createdAt","updatedAt","battingGrip") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Skills"."id"
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Skills API - Skills updated successfully: {
  "id": "cmcs37dbz000dw2r69ou5uq4g",
  "userId": "cmcr7avti0000w2kbdc4ocath",
  "studentId": "cmcr7avu00002w2kb09d6emwc",
  "studentName": "Hello",
  "studentEmail": "hello@gmail.com",
  "age": 18,
  "pushupScore": null,
  "pullupScore": null,
  "verticalJump": null,
  "gripStrength": null,
  "sprintTime": null,
  "sprint50m": null,
  "shuttleRun": null,
  "run5kTime": null,
  "yoyoTest": null,
  "category": "PHYSICAL",
  "lastUpdated": "2025-07-06T19:50:33.791Z",
  "createdAt": "2025-07-06T19:50:33.791Z",
  "updatedAt": "2025-07-06T19:50:33.791Z",
  "carbohydrates": null,
  "fats": null,
  "waterIntake": null,
  "moodScore": null,
  "protein": null,
  "sleepScore": null,
  "totalCalories": null,
  "aim": null,
  "backFootDrag": null,
  "backFootLanding": null,
  "backLift": null,
  "battingBalance": null,
  "battingGrip": 5,
  "battingStance": null,
  "bowlingGrip": null,
  "calling": null,
  "cockingOfWrist": null,
  "flatCatch": null,
  "followThrough": null,
  "frontFootLanding": null,
  "highCatch": null,
  "highElbow": null,
  "hipDrive": null,
  "nonBowlingArm": null,
  "pickUp": null,
  "positioningOfBall": null,
  "receiving": null,
  "release": null,
  "runUp": null,
  "runningBetweenWickets": null,
  "softHands": null,
  "throw": null,
  "topHandDominance": null,
  "student": {
    "studentName": "Hello",
    "age": 18,
    "academy": "Not specified",
    "height": 0,
    "weight": 0
  }
}
Skills API - Triggering badge evaluation for student: cmcr7avu00002w2kb09d6emwc
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 25,
  numericValue: 25,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
 POST /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 603ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 48ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 920ms
Skills API - Received request body: {
  "battingGrip": 5,
  "studentId": "cmcr7avu00002w2kb09d6emwc"
}
Skills API - Session user: {
  name: 'Coach 1',
  email: 'coach1@gmail.com',
  image: undefined,
  id: 'cmcr8o6gc0006w2uwdw162bcv',
  role: 'COACH'
}
Skills API - Student ID from request: cmcr7avu00002w2kb09d6emwc
Skills API - Coach updating student data
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
Skills API - Target student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  userId: 'cmcr7avti0000w2kbdc4ocath',
  studentName: 'Hello',
  username: 'hello',
  email: 'hello@gmail.com',
  age: 18,
  height: 0,
  weight: 0,
  academy: 'Not specified',
  sport: 'CRICKET',
  role: 'All-rounder',
  coachId: 'cmcr8o6gk0008w2uwnbbl6ph1',
  createdAt: 2025-07-06T04:57:30.024Z,
  updatedAt: 2025-07-06T05:36:16.532Z,
  coach: {
    id: 'cmcr8o6gk0008w2uwnbbl6ph1',
    userId: 'cmcr8o6gc0006w2uwdw162bcv',
    name: 'Coach 1',
    username: 'coach1',
    email: 'coach1@gmail.com',
    academy: 'Not specified',
    createdAt: 2025-07-06T05:35:49.941Z,
    updatedAt: 2025-07-06T05:35:49.941Z
  }
}
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
Skills API - Coach found: {
  id: 'cmcr8o6gk0008w2uwnbbl6ph1',
  userId: 'cmcr8o6gc0006w2uwdw162bcv',
  name: 'Coach 1',
  username: 'coach1',
  email: 'coach1@gmail.com',
  academy: 'Not specified',
  createdAt: 2025-07-06T05:35:49.941Z,
  updatedAt: 2025-07-06T05:35:49.941Z
}
Skills API - Coach authorization successful
Skills API - Update data prepared: {
  "battingGrip": 5
}
Skills API - Target student ID: cmcr7avu00002w2kb09d6emwc
prisma:query BEGIN
prisma:query SELECT "public"."Skills"."id" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) OFFSET $2
prisma:query UPDATE "public"."Skills" SET "battingGrip" = $1, "updatedAt" = $2 WHERE ("public"."Skills"."id" = $3 AND ("public"."Skills"."studentId" = $4 AND 1=1)) RETURNING "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance"
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Skills API - Skills updated successfully: {
  "id": "cmcs37dbz000dw2r69ou5uq4g",
  "userId": "cmcr7avti0000w2kbdc4ocath",
  "studentId": "cmcr7avu00002w2kb09d6emwc",
  "studentName": "Hello",
  "studentEmail": "hello@gmail.com",
  "age": 18,
  "pushupScore": null,
  "pullupScore": null,
  "verticalJump": null,
  "gripStrength": null,
  "sprintTime": null,
  "sprint50m": null,
  "shuttleRun": null,
  "run5kTime": null,
  "yoyoTest": null,
  "category": "PHYSICAL",
  "lastUpdated": "2025-07-06T19:50:33.791Z",
  "createdAt": "2025-07-06T19:50:33.791Z",
  "updatedAt": "2025-07-06T19:50:44.972Z",
  "carbohydrates": null,
  "fats": null,
  "waterIntake": null,
  "moodScore": null,
  "protein": null,
  "sleepScore": null,
  "totalCalories": null,
  "aim": null,
  "backFootDrag": null,
  "backFootLanding": null,
  "backLift": null,
  "battingBalance": null,
  "battingGrip": 5,
  "battingStance": null,
  "bowlingGrip": null,
  "calling": null,
  "cockingOfWrist": null,
  "flatCatch": null,
  "followThrough": null,
  "frontFootLanding": null,
  "highCatch": null,
  "highElbow": null,
  "hipDrive": null,
  "nonBowlingArm": null,
  "pickUp": null,
  "positioningOfBall": null,
  "receiving": null,
  "release": null,
  "runUp": null,
  "runningBetweenWickets": null,
  "softHands": null,
  "throw": null,
  "topHandDominance": null,
  "student": {
    "studentName": "Hello",
    "age": 18,
    "academy": "Not specified",
    "height": 0,
    "weight": 0
  }
}
Skills API - Triggering badge evaluation for student: cmcr7avu00002w2kb09d6emwc
BadgeEngine - Starting evaluation for student: cmcr7avu00002w2kb09d6emwc
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcr7avu00002w2kb09d6emwc',
  name: 'Hello',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 0
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51)) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 50,
  relevant: 50,
  sport: 'CRICKET',
  badgeNames: [
    'First Steps',        'Push It',           'Grip Strength',
    'Sprint Starter',     'Endurance Builder', 'Stance Master',
    'Grip Rookie',        'Catch Beginner',    'Throw Basics',
    'Balance Foundation', 'Hydration Hero',    'Sleep Tracker',
    'Mood Monitor',       'Protein Power',     'Calorie Counter',
    'First Match',        'Team Player',       'Debut Score',
    'Field Presence',     'Match Regular',     'Push Power',
    'Pull Champion',      'Vertical Leap',     'Speed Demon',
    'Distance Runner',    'Batting Technique', 'Bowling Mastery',
    'Fielding Expert',    'All-Rounder',       'Technical Consistency',
    'Hydration Master',   'Sleep Champion',    'Nutrition Balance',
    'Wellness Warrior',   'Mood Stability',    'Consistent Performer',
    'Half Century',       'Bowling Figures',   'Match Winner',
    'Season Regular',     'Century Maker',     'Five-Wicket Haul',
    'Perfect 10',         'Elite Fitness',     'Match Dominator',
    'Technique Master',   'Wellness Guru',     'Peak Performer',
    'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Steps',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Steps', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'First Steps',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Steps', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push It',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push It', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push It',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push It', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Strength',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'gripStrength',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Strength', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'gripStrength',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Strength',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Strength', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sprint Starter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sprint Starter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Sprint Starter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sprint Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Endurance Builder',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '35',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Endurance Builder', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '35',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Endurance Builder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Endurance Builder',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Catch Beginner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Catch Beginner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Catch Beginner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Catch Beginner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Push Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pushupScore',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Push Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pushupScore',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Push Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Push Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Vertical Leap',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'verticalJump',
      operator: 'GTE',
      value: '40',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Vertical Leap', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'verticalJump',
  operator: 'GTE',
  value: '40',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Vertical Leap',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Vertical Leap', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Speed Demon',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'sprint50m',
      operator: 'LTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Speed Demon', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'sprint50m',
  operator: 'LTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Speed Demon',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Speed Demon', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Distance Runner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'run5kTime',
      operator: 'LTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Distance Runner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'run5kTime',
  operator: 'LTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Distance Runner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Distance Runner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Mastery', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 25,
  numericValue: 25,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 50 }
 POST /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 472ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 41ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 19ms
 GET /api/auth/session 200 in 48ms
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 38ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/skills 200 in 11ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 41ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 44ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5) OFFSET $6
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) OFFSET $51
 GET /api/badges?manage=true 200 in 68ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 23ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Not%20specified 200 in 139ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills?studentId=cmcr7avu00002w2kb09d6emwc 200 in 186ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 29ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1516ms
 GET / 200 in 27ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET / 200 in 152ms
 GET / 200 in 36ms
[?25h
