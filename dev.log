
> peakplay@1.0.0 dev
> next dev

   ‚ñ≤ Next.js 15.3.2
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.75:3000
   - Environments: .env
   - Experiments (use with caution):
     ¬∑ clientTraceMetadata

 ‚úì Starting...
> [PWA] Compile server
> [PWA] Compile server
> [PWA] Compile client (static)
> [PWA] Auto register service worker with: /Users/lilsp/peakplay-prototype/node_modules/next-pwa/register.js
> [PWA] Service worker: /Users/lilsp/peakplay-prototype/public/sw.js
> [PWA]   url: /sw.js
> [PWA]   scope: /
> [PWA] Build in develop mode, cache and precache are mostly disabled. This means offline support is disabled, but you can continue developing other functions in service worker.
 ‚úì Ready in 2.4s
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚óã Compiling / ...
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 4470ms
 GET / 200 in 31ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /auth/signin 200 in 4484ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 5194ms
 GET /api/auth/session 200 in 6ms
 GET /api/auth/providers 200 in 15ms
 GET /api/auth/csrf 200 in 7ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: shreyas@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - shreyas@gmail.com 
 POST /api/auth/callback/credentials 200 in 537ms
 GET /api/auth/session 200 in 23ms
 GET /dashboard 200 in 14ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 1029ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/student/profile 200 in 1130ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 2263ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 2330ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
 GET /api/hooper-index 200 in 1845ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
 GET /api/hooper-index 200 in 2102ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
 ‚ö† Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills 200 in 1073ms
 GET /api/skills 200 in 1074ms
 GET /api/badges?type=progress 200 in 3526ms
 GET /_next/static/webpack/34bd4095bdda1d1d.webpack.hot-update.json 404 in 1142ms
 GET /api/badges?type=progress 200 in 3461ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /dashboard 200 in 84ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/auth/session 200 in 28ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 22ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 31ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 131ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 212ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 642ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 41ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 39ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 755ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 63ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 63ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 17ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 96ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 113ms
 GET /api/skills/analytics?age=18 200 in 21ms
 GET /api/skills/analytics?age=18 200 in 29ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/auth/session 200 in 53ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 50ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 56ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 29ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 44ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 152ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 25ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 303ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
 GET /api/skills/analytics?age=18 200 in 13ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 738ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1541ms
 GET / 200 in 34ms
 GET / 200 in 31ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 1114ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/student/profile 200 in 438ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /dashboard 200 in 185ms
 GET /api/auth/session 200 in 12ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 19ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 1894ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 GET /api/hooper-index 200 in 2419ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 865ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 897ms
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 2485ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 433ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 401ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 3523ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 51ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 56ms
 GET /api/skills/analytics?age=18 200 in 30ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 21ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 40ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 41ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 16ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 15ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 41ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 40ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 26ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 16ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚®Ø ./src/components/SkillSnap.tsx
Error:   [31mx[0m Unexpected token `div`. Expected jsx identifier
      ,-[[36;1;4m/Users/lilsp/peakplay-prototype/src/components/SkillSnap.tsx[0m:2519:1]
 [2m2516[0m |   }
 [2m2517[0m | 
 [2m2518[0m |   return (
 [2m2519[0m |     <div className="relative">
      : [35;1m     ^^^[0m
 [2m2520[0m |       {/* Refresh Header */}
 [2m2521[0m |       <div className="flex items-center justify-between mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200">
 [2m2522[0m |         <div className="flex items-center space-x-3">
      `----

Caused by:
    Syntax Error

Import trace for requested module:
./src/components/SkillSnap.tsx
./src/app/dashboard/page.tsx
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1389ms
 GET / 200 in 25ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 1219ms
 GET /auth/signin 200 in 1135ms
 GET /api/auth/session 200 in 10ms
 GET /api/auth/providers 200 in 15ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: false
[AUTH_EVENT] LOGIN_FAILED - shreyas@gmail.com - Invalid password
‚ùå Authentication error: Error: Invalid email or password
    at Object.authorize (src/lib/auth.ts:48:18)
  46 |             // Log failed login attempt
  47 |             await logAuthEvent('LOGIN_FAILED', user.email, 'Invalid password');
> 48 |             throw new Error("Invalid email or password");
     |                  ^
  49 |           }
  50 |
  51 |           console.log('‚úÖ Authentication successful for:', user.email);
 POST /api/auth/callback/credentials 401 in 485ms
 GET /api/auth/providers 200 in 16ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: shreyas@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - shreyas@gmail.com 
 POST /api/auth/callback/credentials 200 in 311ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 11ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 776ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /api/student/profile 200 in 876ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 1473ms
 GET /api/skills 200 in 1420ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1730ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1956ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2835ms
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2763ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 GET /api/auth/session 200 in 19ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 24ms
 GET /api/hooper-index 200 in 24ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/hooper-index 200 in 32ms
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
 GET /api/skills 200 in 38ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 616ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 39ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 45ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 525ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 499ms
 GET /api/auth/session 200 in 136ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 44ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 36ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 169ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 214ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 815ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 45ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 47ms
 GET /api/skills/analytics?age=18 200 in 23ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 16ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 44ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 39ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 18ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 14ms
 GET /api/auth/session 200 in 54ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 32ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/hooper-index 200 in 25ms
 GET /api/hooper-index 200 in 37ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 34ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 133ms
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 145ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 23ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 12ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 849ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1156ms
 GET / 200 in 38ms
 GET /dashboard 200 in 189ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 1243ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 973ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 1593ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 2042ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 2089ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2913ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 48ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/skills 200 in 173ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 452ms
 GET /api/skills/analytics?age=18 200 in 348ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/auth/session 200 in 33ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 45ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT 1
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 45ms
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
 GET /api/hooper-index 200 in 138ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 144ms
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 154ms
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 191ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 25ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 17ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 1006ms
 GET /dashboard 200 in 181ms
 GET /api/auth/session 200 in 14ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 20ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 28ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 22ms
 GET /api/hooper-index 200 in 23ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 751ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 40ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 45ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 20ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 23ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1238ms
 GET / 200 in 29ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 1323ms
 GET /dashboard 200 in 141ms
 POST /api/auth/_log 200 in 59ms
 GET /auth/signin 200 in 59ms
 GET /api/auth/session 200 in 8ms
 GET /api/auth/providers 200 in 12ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: shreyas@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - shreyas@gmail.com 
 POST /api/auth/callback/credentials 200 in 433ms
 GET /api/auth/session 200 in 7ms
 GET /dashboard 200 in 10ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 622ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 714ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 1512ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
 GET /api/hooper-index 200 in 1028ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1099ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2143ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 45ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 50ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 404ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 431ms
 GET /api/auth/session 200 in 45ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 34ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 42ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/hooper-index 200 in 173ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 138ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
 GET /api/skills 200 in 159ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 222ms
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 17ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 23ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 827ms
 GET /api/auth/session 200 in 25ms
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 29ms
 GET /api/hooper-index 200 in 27ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/hooper-index 200 in 30ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 41ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 37ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 41ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 13ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 10ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 735ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /api/auth/session 200 in 1480ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 5ms
 GET /auth/signin 200 in 114ms
 GET /api/auth/session 200 in 7ms
 GET /api/auth/providers 200 in 14ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: shreyas@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - shreyas@gmail.com 
 POST /api/auth/callback/credentials 200 in 442ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 20ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 717ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 806ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 1310ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1828ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1908ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 52ms
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 82ms
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2650ms
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/skills/analytics?age=18 200 in 488ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 472ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1352ms
 GET / 200 in 28ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 GET /api/auth/session 200 in 807ms
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 POST /api/auth/_log 200 in 107ms
 GET /auth/signin 200 in 108ms
 GET /api/auth/session 200 in 10ms
 GET /api/auth/providers 200 in 14ms
 GET /api/auth/csrf 200 in 5ms
üîç Authorize called with credentials: { email: 'shreyas@gmail.com', password: '***' }
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs68xwg0000w2uazrnp7b2o',
  email: 'shreyas@gmail.com',
  role: 'ATHLETE'
}
üîê Password valid: true
‚úÖ Authentication successful for: shreyas@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - shreyas@gmail.com 
 POST /api/auth/callback/credentials 200 in 344ms
 GET /api/auth/session 200 in 4ms
 GET /dashboard 200 in 21ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 624ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
 GET /api/student/profile 200 in 759ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Starting evaluation for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 1494ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE "public"."Badge"."id" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
BadgeEngine - Student found: {
  id: 'cmcs68xwt0002w2uar4m23ydk',
  name: 'Shreyas',
  sport: 'CRICKET',
  hasSkills: true,
  existingBadges: 10,
  hasCoach: true
}
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
 GET /api/hooper-index 200 in 1016ms
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE ("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."badgeId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)) OFFSET $53
BadgeEngine - Found badges for evaluation: {
  total: 51,
  relevant: 51,
  sport: 'CRICKET',
  badgeNames: [
    'Starter',               'First Steps',        'Push It',
    'Grip Strength',         'Sprint Starter',     'Endurance Builder',
    'Stance Master',         'Grip Rookie',        'Catch Beginner',
    'Throw Basics',          'Balance Foundation', 'Hydration Hero',
    'Sleep Tracker',         'Mood Monitor',       'Protein Power',
    'Calorie Counter',       'First Match',        'Team Player',
    'Debut Score',           'Field Presence',     'Match Regular',
    'Push Power',            'Pull Champion',      'Vertical Leap',
    'Speed Demon',           'Distance Runner',    'Batting Technique',
    'Bowling Mastery',       'Fielding Expert',    'All-Rounder',
    'Technical Consistency', 'Hydration Master',   'Sleep Champion',
    'Nutrition Balance',     'Wellness Warrior',   'Mood Stability',
    'Consistent Performer',  'Half Century',       'Bowling Figures',
    'Match Winner',          'Season Regular',     'Century Maker',
    'Five-Wicket Haul',      'Perfect 10',         'Elite Fitness',
    'Match Dominator',       'Technique Master',   'Wellness Guru',
    'Peak Performer',        'Consistency King',   'PeakPlay Legend'
  ]
}
BadgeEngine - Evaluating badge: Starter
BadgeEngine - Badge not yet earned, evaluating rules: { badgeName: 'Starter', ruleCount: 0, rules: [] }
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Starter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Steps
BadgeEngine - Badge already earned: First Steps
BadgeEngine - Evaluating badge: Push It
BadgeEngine - Badge already earned: Push It
BadgeEngine - Evaluating badge: Grip Strength
BadgeEngine - Badge already earned: Grip Strength
BadgeEngine - Evaluating badge: Sprint Starter
BadgeEngine - Badge already earned: Sprint Starter
BadgeEngine - Evaluating badge: Endurance Builder
BadgeEngine - Badge already earned: Endurance Builder
BadgeEngine - Evaluating badge: Stance Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Stance Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Stance Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Grip Rookie
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Grip Rookie',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Grip Rookie', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Catch Beginner
BadgeEngine - Badge already earned: Catch Beginner
BadgeEngine - Evaluating badge: Throw Basics
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Throw Basics',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Throw Basics', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Balance Foundation
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Balance Foundation',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Balance Foundation',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Hero
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Hero',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '2',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Hero', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Tracker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Tracker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Tracker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Monitor
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Monitor',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Monitor', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Protein Power
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Protein Power',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
 GET /api/hooper-index 200 in 1097ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Protein Power', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Calorie Counter
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Calorie Counter',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'totalCalories',
      operator: 'GTE',
      value: '1000',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Calorie Counter', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: First Match
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'First Match',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'First Match', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Team Player
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Team Player',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Team Player', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Debut Score
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Debut Score',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Debut Score', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Field Presence
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Field Presence',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'fieldingPerformances',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Field Presence', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Push Power
BadgeEngine - Badge already earned: Push Power
BadgeEngine - Evaluating badge: Pull Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Pull Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pullupScore',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Pull Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Vertical Leap
BadgeEngine - Badge already earned: Vertical Leap
BadgeEngine - Evaluating badge: Speed Demon
BadgeEngine - Badge already earned: Speed Demon
BadgeEngine - Evaluating badge: Distance Runner
BadgeEngine - Badge already earned: Distance Runner
BadgeEngine - Evaluating badge: Batting Technique
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Batting Technique',
  ruleCount: 5,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingStance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'backLift',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'topHandDominance',
      operator: 'GTE',
      value: '8',
      weight: 0.2,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Batting Technique',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Bowling Mastery
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Mastery',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'runUp',
      operator: 'GTE',
      value: '8',
      weight: 0.33,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'followThrough',
      operator: 'GTE',
      value: '8',
      weight: 0.34,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Bowling Mastery',
  earned: false,
  progress: 33,
  score: 0.33
}
BadgeEngine - Evaluating badge: Fielding Expert
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Fielding Expert',
  ruleCount: 4,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'highCatch',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'throw',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'pickUp',
      operator: 'GTE',
      value: '8',
      weight: 0.25,
      isRequired: false
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Fielding Expert', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: All-Rounder
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'All-Rounder',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'battingBalance',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'bowlingGrip',
      operator: 'GTE',
      value: '7',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'SKILLS_METRIC',
      fieldName: 'flatCatch',
      operator: 'GTE',
      value: '7',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'All-Rounder', earned: false, progress: 33, score: 0.33 }
BadgeEngine - Evaluating badge: Technical Consistency
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technical Consistency',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Technical Consistency',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Hydration Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Hydration Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'waterIntake',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Hydration Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Sleep Champion
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Sleep Champion',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'sleepScore',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Sleep Champion', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Nutrition Balance
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Nutrition Balance',
  ruleCount: 3,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'protein',
      operator: 'GTE',
      value: '60',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'carbohydrates',
      operator: 'GTE',
      value: '200',
      weight: 0.33,
      isRequired: true
    },
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'fats',
      operator: 'GTE',
      value: '50',
      weight: 0.34,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Nutrition Balance',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Wellness Warrior
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Warrior',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'allMetrics',
      operator: 'GTE',
      value: '1',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Warrior', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Mood Stability
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Mood Stability',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'moodScore',
      operator: 'GTE',
      value: '7',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Mood Stability', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistent Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistent Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '6',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: {
  badgeName: 'Consistent Performer',
  earned: false,
  progress: 0,
  score: 0
}
BadgeEngine - Evaluating badge: Half Century
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Half Century',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '50',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Half Century', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Bowling Figures
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Bowling Figures',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '3',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Bowling Figures', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Winner
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Winner',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesWon',
      operator: 'GTE',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Winner', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Season Regular
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Season Regular',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_COUNT',
      fieldName: 'matchesPlayed',
      operator: 'GTE',
      value: '15',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Season Regular', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Century Maker
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Century Maker',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '100',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Century Maker', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Five-Wicket Haul
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Five-Wicket Haul',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STAT',
      fieldName: 'wicketsTaken',
      operator: 'GTE',
      value: '5',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Five-Wicket Haul', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Perfect 10
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Perfect 10',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_ANY',
      fieldName: 'anySkill',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Perfect 10', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Elite Fitness
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Elite Fitness',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'FITNESS_PERCENTILE',
      fieldName: 'allFitness',
      operator: 'GTE',
      value: '90',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Elite Fitness', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Match Dominator
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Match Dominator',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Match Dominator', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Technique Master
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Technique Master',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'SKILLS_AVERAGE',
      fieldName: 'technicalAverage',
      operator: 'GTE',
      value: '9',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Technique Master', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Wellness Guru
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Wellness Guru',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'WELLNESS_STREAK',
      fieldName: 'perfectWellness',
      operator: 'EQ',
      value: '10',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Wellness Guru', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Peak Performer
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Peak Performer',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_AVERAGE',
      fieldName: 'matchRating',
      operator: 'GTE',
      value: '8',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Peak Performer', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: Consistency King
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'Consistency King',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'MATCH_STREAK',
      fieldName: 'runsScored',
      operator: 'GTE',
      value: '25',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'Consistency King', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluating badge: PeakPlay Legend
BadgeEngine - Badge not yet earned, evaluating rules: {
  badgeName: 'PeakPlay Legend',
  ruleCount: 1,
  rules: [
    {
      ruleType: 'PEAKSCORE_PERCENTILE',
      fieldName: 'peakScore',
      operator: 'GTE',
      value: '95',
      weight: 1,
      isRequired: true
    }
  ]
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Badge evaluation result: { badgeName: 'PeakPlay Legend', earned: false, progress: 0, score: 0 }
BadgeEngine - Evaluation complete: { newBadges: 0, totalProgress: 41 }
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE "public"."Skills"."studentId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."id" IN ($1) OFFSET $2
BadgeEngine.getBadgeProgress - About to query badges for student: cmcs68xwt0002w2uar4m23ydk
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt" FROM "public"."Badge" WHERE (("public"."Badge"."sport" = $1 OR "public"."Badge"."sport" = $2) AND "public"."Badge"."isActive" = $3) OFFSET $4
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."StudentBadge"."id", "public"."StudentBadge"."studentId", "public"."StudentBadge"."badgeId", "public"."StudentBadge"."awardedAt", "public"."StudentBadge"."awardedBy", "public"."StudentBadge"."score", "public"."StudentBadge"."progress", "public"."StudentBadge"."isRevoked", "public"."StudentBadge"."revokedAt", "public"."StudentBadge"."revokedBy", "public"."StudentBadge"."revokeReason", "public"."StudentBadge"."createdAt", "public"."StudentBadge"."updatedAt" FROM "public"."StudentBadge" WHERE (("public"."StudentBadge"."studentId" = $1 AND "public"."StudentBadge"."isRevoked" = $2) AND "public"."StudentBadge"."badgeId" IN ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)) OFFSET $54
BadgeEngine - Evaluating badge rules: { badgeName: 'Starter', ruleCount: 0 }
BadgeEngine - Final evaluation: {
  badgeName: 'Starter',
  totalScore: 0,
  maxScore: 0,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Stance Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Stance Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Grip Rookie', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Grip Rookie',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Throw Basics', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '6',
  numericTarget: 6
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Throw Basics',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Balance Foundation', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Balance Foundation',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Hero', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '2',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '2'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Hero',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Tracker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Tracker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Monitor', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Monitor',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Protein Power', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Protein Power',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Calorie Counter', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  operator: 'GTE',
  value: '1000',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'totalCalories',
  passed: false,
  operator: 'GTE',
  targetValue: '1000'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Calorie Counter',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'First Match', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'First Match',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Team Player', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Team Player',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Debut Score', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '1',
  numericTarget: 1
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Debut Score',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Field Presence', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'fieldingPerformances',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Field Presence',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Pull Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pullupScore',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
BadgeEngine - Field value is null/undefined/zero (no input), skipping rule
BadgeEngine - Final evaluation: {
  badgeName: 'Pull Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Batting Technique', ruleCount: 5 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingStance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingGrip',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'backLift',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  operator: 'GTE',
  value: '8',
  weight: 0.2,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'topHandDominance',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Batting Technique',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Mastery', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  operator: 'GTE',
  value: '8',
  weight: 0.33,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'runUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  operator: 'GTE',
  value: '8',
  weight: 0.34,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'followThrough',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Mastery',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Fielding Expert', ruleCount: 4 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'highCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'throw',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  operator: 'GTE',
  value: '8',
  weight: 0.25,
  isRequired: false
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'pickUp',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Fielding Expert',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 0,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'All-Rounder', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'battingBalance',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  operator: 'GTE',
  value: '7',
  weight: 0.33,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'bowlingGrip',
  passed: true,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  operator: 'GTE',
  value: '7',
  weight: 0.34,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_METRIC',
  fieldName: 'flatCatch',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'All-Rounder',
  totalScore: 0.33,
  maxScore: 1,
  requiredRulesPassed: 1,
  totalRequiredRules: 3,
  progress: 33,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technical Consistency', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '7',
  numericTarget: 7
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technical Consistency',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Hydration Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'waterIntake',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Hydration Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Sleep Champion', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'sleepScore',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Sleep Champion',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Nutrition Balance', ruleCount: 3 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  operator: 'GTE',
  value: '60',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'protein',
  passed: false,
  operator: 'GTE',
  targetValue: '60'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  operator: 'GTE',
  value: '200',
  weight: 0.33,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'carbohydrates',
  passed: false,
  operator: 'GTE',
  targetValue: '200'
}
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  operator: 'GTE',
  value: '50',
  weight: 0.34,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'fats',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Nutrition Balance',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 3,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Warrior', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  operator: 'GTE',
  value: '1',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'allMetrics',
  passed: false,
  operator: 'GTE',
  targetValue: '1'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Warrior',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Mood Stability', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  operator: 'GTE',
  value: '7',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'moodScore',
  passed: false,
  operator: 'GTE',
  targetValue: '7'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Mood Stability',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistent Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '6',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '6'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistent Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Half Century', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '50',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '50',
  numericTarget: 50
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '50'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Half Century',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Bowling Figures', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '3',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '3',
  numericTarget: 3
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '3'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Bowling Figures',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Winner', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  operator: 'GTE',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesWon',
  passed: false,
  operator: 'GTE',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Winner',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Season Regular', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  operator: 'GTE',
  value: '15',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '15',
  numericTarget: 15
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_COUNT',
  fieldName: 'matchesPlayed',
  passed: false,
  operator: 'GTE',
  targetValue: '15'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Season Regular',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Century Maker', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '100',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '100',
  numericTarget: 100
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '100'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Century Maker',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Five-Wicket Haul', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  operator: 'GTE',
  value: '5',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" WHERE "public"."MatchPerformance"."studentId" = $1 OFFSET $2
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '5',
  numericTarget: 5
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STAT',
  fieldName: 'wicketsTaken',
  passed: false,
  operator: 'GTE',
  targetValue: '5'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Five-Wicket Haul',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Perfect 10', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 4,
  numericValue: 4,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 8,
  numericValue: 8,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 7,
  numericValue: 7,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 6,
  numericValue: 6,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5,
  numericValue: 5,
  operator: 'EQ',
  targetValue: '10',
  numericTarget: 10
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_ANY',
  fieldName: 'anySkill',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Perfect 10',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Elite Fitness', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  operator: 'GTE',
  value: '90',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 50,
  numericValue: 50,
  operator: 'GTE',
  targetValue: '90',
  numericTarget: 90
}
BadgeEngine - Rule result: {
  ruleType: 'FITNESS_PERCENTILE',
  fieldName: 'allFitness',
  passed: false,
  operator: 'GTE',
  targetValue: '90'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Elite Fitness',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Match Dominator', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Match Dominator',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Technique Master', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  operator: 'GTE',
  value: '9',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 5.615384615384615,
  numericValue: 5.615384615384615,
  operator: 'GTE',
  targetValue: '9',
  numericTarget: 9
}
BadgeEngine - Rule result: {
  ruleType: 'SKILLS_AVERAGE',
  fieldName: 'technicalAverage',
  passed: false,
  operator: 'GTE',
  targetValue: '9'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Technique Master',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Wellness Guru', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  operator: 'EQ',
  value: '10',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND "public"."Skills"."updatedAt" >= $2 AND "public"."Skills"."updatedAt" <= $3) ORDER BY "public"."Skills"."updatedAt" DESC OFFSET $4
BadgeEngine - Rule result: {
  ruleType: 'WELLNESS_STREAK',
  fieldName: 'perfectWellness',
  passed: false,
  operator: 'EQ',
  targetValue: '10'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Wellness Guru',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Peak Performer', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  operator: 'GTE',
  value: '8',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Evaluating rule condition: {
  fieldValue: 0,
  numericValue: 0,
  operator: 'GTE',
  targetValue: '8',
  numericTarget: 8
}
BadgeEngine - Rule result: {
  ruleType: 'MATCH_AVERAGE',
  fieldName: 'matchRating',
  passed: false,
  operator: 'GTE',
  targetValue: '8'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Peak Performer',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'Consistency King', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  operator: 'GTE',
  value: '25',
  weight: 1,
  isRequired: true
}
prisma:query SELECT "public"."MatchPerformance"."id", "public"."MatchPerformance"."studentId", "public"."MatchPerformance"."matchId", "public"."MatchPerformance"."played", "public"."MatchPerformance"."position", "public"."MatchPerformance"."stats", "public"."MatchPerformance"."rating", "public"."MatchPerformance"."notes", "public"."MatchPerformance"."createdAt", "public"."MatchPerformance"."updatedAt" FROM "public"."MatchPerformance" LEFT JOIN "public"."Match" AS "orderby_1" ON ("orderby_1"."id") = ("public"."MatchPerformance"."matchId") WHERE "public"."MatchPerformance"."studentId" = $1 ORDER BY "orderby_1"."matchDate" DESC LIMIT $2 OFFSET $3
BadgeEngine - Rule result: {
  ruleType: 'MATCH_STREAK',
  fieldName: 'runsScored',
  passed: false,
  operator: 'GTE',
  targetValue: '25'
}
BadgeEngine - Final evaluation: {
  badgeName: 'Consistency King',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
BadgeEngine - Evaluating badge rules: { badgeName: 'PeakPlay Legend', ruleCount: 1 }
BadgeEngine - Rule evaluation: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  operator: 'GTE',
  value: '95',
  weight: 1,
  isRequired: true
}
BadgeEngine - Evaluating rule condition: {
  fieldValue: 70,
  numericValue: 70,
  operator: 'GTE',
  targetValue: '95',
  numericTarget: 95
}
BadgeEngine - Rule result: {
  ruleType: 'PEAKSCORE_PERCENTILE',
  fieldName: 'peakScore',
  passed: false,
  operator: 'GTE',
  targetValue: '95'
}
BadgeEngine - Final evaluation: {
  badgeName: 'PeakPlay Legend',
  totalScore: 0,
  maxScore: 1,
  requiredRulesPassed: 0,
  totalRequiredRules: 1,
  progress: 0,
  earned: false
}
 GET /api/badges?type=progress 200 in 2209ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."userId", "public"."Skills"."studentId", "public"."Skills"."studentName", "public"."Skills"."studentEmail", "public"."Skills"."age", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."category", "public"."Skills"."lastUpdated", "public"."Skills"."createdAt", "public"."Skills"."updatedAt", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake", "public"."Skills"."moodScore", "public"."Skills"."protein", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."aim", "public"."Skills"."backFootDrag", "public"."Skills"."backFootLanding", "public"."Skills"."backLift", "public"."Skills"."battingBalance", "public"."Skills"."battingGrip", "public"."Skills"."battingStance", "public"."Skills"."bowlingGrip", "public"."Skills"."calling", "public"."Skills"."cockingOfWrist", "public"."Skills"."flatCatch", "public"."Skills"."followThrough", "public"."Skills"."frontFootLanding", "public"."Skills"."highCatch", "public"."Skills"."highElbow", "public"."Skills"."hipDrive", "public"."Skills"."nonBowlingArm", "public"."Skills"."pickUp", "public"."Skills"."positioningOfBall", "public"."Skills"."receiving", "public"."Skills"."release", "public"."Skills"."runUp", "public"."Skills"."runningBetweenWickets", "public"."Skills"."softHands", "public"."Skills"."throw", "public"."Skills"."topHandDominance" FROM "public"."Skills" WHERE ("public"."Skills"."studentId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 44ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."age", "public"."Student"."academy", "public"."Student"."height", "public"."Student"."weight" FROM "public"."Student" WHERE "public"."Student"."id" IN ($1) OFFSET $2
 GET /api/skills 200 in 53ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 442ms
prisma:query SELECT "public"."Skills"."id", "public"."Skills"."pushupScore", "public"."Skills"."pullupScore", "public"."Skills"."verticalJump", "public"."Skills"."gripStrength", "public"."Skills"."sprintTime", "public"."Skills"."sprint50m", "public"."Skills"."shuttleRun", "public"."Skills"."run5kTime", "public"."Skills"."yoyoTest", "public"."Skills"."moodScore", "public"."Skills"."sleepScore", "public"."Skills"."totalCalories", "public"."Skills"."protein", "public"."Skills"."carbohydrates", "public"."Skills"."fats", "public"."Skills"."waterIntake" FROM "public"."Skills" WHERE ("public"."Skills"."age" >= $1 AND "public"."Skills"."age" <= $2) OFFSET $3
 GET /api/skills/analytics?age=18 200 in 419ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET / 200 in 1417ms
 GET / 200 in 33ms
 GET / 200 in 106ms
 GET / 200 in 107ms
 GET /auth/signin 200 in 184ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
 GET /api/auth/session 200 in 1083ms
 GET /api/auth/providers 200 in 14ms
 GET /api/auth/csrf 200 in 4ms
üîç Authorize called with credentials: { email: 'coach@gmail.com', password: '***' }
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."username", "public"."User"."email", "public"."User"."emailVerified", "public"."User"."image", "public"."User"."password", "public"."User"."role", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE "public"."Student"."userId" IN ($1) OFFSET $2
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE "public"."Coach"."userId" IN ($1) OFFSET $2
üë§ User found: {
  id: 'cmcs7bruv0003w298p97w6q1y',
  email: 'coach@gmail.com',
  role: 'COACH'
}
üîê Password valid: true
‚úÖ Authentication successful for: coach@gmail.com
[AUTH_EVENT] LOGIN_SUCCESS - coach@gmail.com 
 POST /api/auth/callback/credentials 200 in 532ms
 GET /api/auth/session 200 in 5ms
 GET /dashboard 200 in 54ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1189ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 1280ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/coach/profile 200 in 1197ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/skills 200 in 1200ms
 GET /api/skills 200 in 1134ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
 GET /api/students/by-academy?academy=Transform 200 in 1201ms
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."sport" FROM "public"."Student" WHERE ("public"."Student"."academy" = $1 AND "public"."Student"."coachId" IS NULL) OFFSET $2
 GET /api/students/by-academy?academy=Transform 200 in 15ms
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
 GET /api/badges?manage=true 200 in 1262ms
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Badge"."id", "public"."Badge"."name", "public"."Badge"."description", "public"."Badge"."motivationalText", "public"."Badge"."level", "public"."Badge"."categoryId", "public"."Badge"."icon", "public"."Badge"."sport", "public"."Badge"."isActive", "public"."Badge"."createdAt", "public"."Badge"."updatedAt", COALESCE("aggr_selection_0_StudentBadge"."_aggr_count_studentBadges", 0) AS "_aggr_count_studentBadges" FROM "public"."Badge" LEFT JOIN (SELECT "public"."StudentBadge"."badgeId", COUNT(*) AS "_aggr_count_studentBadges" FROM "public"."StudentBadge" WHERE "public"."StudentBadge"."isRevoked" = $1 GROUP BY "public"."StudentBadge"."badgeId") AS "aggr_selection_0_StudentBadge" ON ("public"."Badge"."id" = "aggr_selection_0_StudentBadge"."badgeId") WHERE 1=1 ORDER BY "public"."Badge"."level" ASC, "public"."Badge"."name" ASC OFFSET $2
prisma:query SELECT "public"."Student"."id", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."academy", "public"."Student"."coachId" FROM "public"."Student" WHERE "public"."Student"."coachId" IN ($1) OFFSET $2
 GET /api/coach/profile 200 in 121ms
prisma:query SELECT "public"."BadgeCategory"."id", "public"."BadgeCategory"."name", "public"."BadgeCategory"."description", "public"."BadgeCategory"."icon", "public"."BadgeCategory"."color", "public"."BadgeCategory"."createdAt", "public"."BadgeCategory"."updatedAt" FROM "public"."BadgeCategory" WHERE "public"."BadgeCategory"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."BadgeRule"."id", "public"."BadgeRule"."badgeId", "public"."BadgeRule"."ruleType", "public"."BadgeRule"."fieldName", "public"."BadgeRule"."operator", "public"."BadgeRule"."value", "public"."BadgeRule"."weight", "public"."BadgeRule"."isRequired", "public"."BadgeRule"."description", "public"."BadgeRule"."createdAt", "public"."BadgeRule"."updatedAt" FROM "public"."BadgeRule" WHERE "public"."BadgeRule"."badgeId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51) OFFSET $52
 GET /api/badges?manage=true 200 in 1274ms
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
 ‚ö† GenerateSW has been called multiple times, perhaps due to running webpack in --watch mode. The precache manifest generated after the first call may be inaccurate! Please see https://github.com/GoogleChrome/workbox/issues/1790 for more information.
[next-auth][warn][DEBUG_ENABLED] 
https://next-auth.js.org/warnings#debug_enabled
prisma:query SELECT 1
prisma:query SELECT "public"."Coach"."id", "public"."Coach"."userId", "public"."Coach"."name", "public"."Coach"."username", "public"."Coach"."email", "public"."Coach"."phone", "public"."Coach"."academy", "public"."Coach"."createdAt", "public"."Coach"."updatedAt" FROM "public"."Coach" WHERE ("public"."Coach"."userId" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."Student"."id", "public"."Student"."userId", "public"."Student"."studentName", "public"."Student"."username", "public"."Student"."email", "public"."Student"."phone", "public"."Student"."age", "public"."Student"."height", "public"."Student"."weight", "public"."Student"."academy", "public"."Student"."sport", "public"."Student"."role", "public"."Student"."coachId", "public"."Student"."createdAt", "public"."Student"."updatedAt" FROM "public"."Student" WHERE ("public"."Student"."id" = $1 AND "public"."Student"."coachId" = $2) LIMIT $3 OFFSET $4
Error creating action: TypeError: Cannot read properties of undefined (reading 'create')
    at POST$1 (webpack-internal:/(rsc)/src/app/api/actions/src/app/api/actions/route.ts:140:39)
  138 |
  139 |     // Create action
> 140 |     const action = await prisma.action.create({
      |                                       ^
  141 |       data: {
  142 |         studentId,
  143 |         coachId: coach.id,
 POST /api/actions 500 in 1327ms
 GET /api/actions 401 in 12ms
[?25h
