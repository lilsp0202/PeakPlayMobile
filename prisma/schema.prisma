generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("ATHLETE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  coach         Coach?
  sessions      Session[]
  skills        Skills?
  student       Student?
}

model Student {
  id                String             @id @default(cuid())
  userId            String             @unique
  studentName       String
  username          String
  email             String
  age               Int
  height            Float
  weight            Float
  academy           String
  sport             String             @default("CRICKET")
  role              String
  coachId           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  receivedFeedback  Feedback[]
  matchPerformances MatchPerformance[]
  skills            Skills?
  coach             Coach?             @relation(fields: [coachId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coach {
  id            String     @id @default(cuid())
  userId        String     @unique
  name          String
  username      String
  email         String
  academy       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  givenFeedback Feedback[]
  students      Student[]
}

model Skills {
  id                    String   @id @default(cuid())
  userId                String   @unique
  studentId             String   @unique
  studentName           String
  studentEmail          String
  age                   Int
  pushupScore           Int?
  pullupScore           Int?
  sprintTime            Float?
  run5kTime             Float?
  category              String   @default("PHYSICAL")
  lastUpdated           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  carbohydrates         Float?
  fats                  Float?
  moodScore             Int?
  protein               Float?
  sleepScore            Int?
  totalCalories         Int?
  aim                   Int?
  backFootDrag          Int?
  backFootLanding       Int?
  backLift              Int?
  battingBalance        Int?
  battingGrip           Int?
  battingStance         Int?
  bowlingGrip           Int?
  calling               Int?
  cockingOfWrist        Int?
  flatCatch             Int?
  followThrough         Int?
  frontFootLanding      Int?
  highCatch             Int?
  highElbow             Int?
  hipDrive              Int?
  nonBowlingArm         Int?
  pickUp                Int?
  positioningOfBall     Int?
  receiving             Int?
  release               Int?
  runUp                 Int?
  runningBetweenWickets Int?
  softHands             Int?
  throw                 Int?
  topHandDominance      Int?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  student               Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id           String             @id @default(cuid())
  matchName    String
  opponent     String
  venue        String?
  matchDate    DateTime
  sport        String
  matchType    String             @default("PRACTICE")
  result       String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  performances MatchPerformance[]
}

model MatchPerformance {
  id        String   @id @default(cuid())
  studentId String
  matchId   String
  played    Boolean  @default(true)
  position  String?
  stats     String
  rating    Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, matchId])
}

model Feedback {
  id        String   @id @default(cuid())
  studentId String
  coachId   String
  title     String
  content   String
  category  String   @default("GENERAL")
  priority  String   @default("MEDIUM")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     Coach    @relation(fields: [coachId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}
