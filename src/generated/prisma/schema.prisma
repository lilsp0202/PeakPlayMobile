// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(ATHLETE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  student  Student?
  coach    Coach?
}

model Student {
  id          String     @id @default(cuid())
  userId      String     @unique
  studentName String
  username    String
  email       String
  age         Int
  height      Float // in cm
  weight      Float // in kg
  academy     String
  role        PlayerRole
  coachId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coach Coach? @relation(fields: [coachId], references: [id])
}

model Coach {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  username  String
  email     String
  academy   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ATHLETE
  COACH
}

enum PlayerRole {
  BATSMAN
  BOWLER
  ALL_ROUNDER
  KEEPER
}
